name: Deploy Real-Time Log Viewer

on:
  push:
    branches: [ main, master ]
    paths:
      - 'realtime-log-viewer.sh'
      - 'REALTIME_LOG_VIEWER.md'
      - '.github/workflows/deploy-log-viewer.yml'

env:
  DROPLET_IP: ${{ secrets.DIGITALOCEAN_HOST }}
  DROPLET_USER: root
  SSH_PRIVATE_KEY: ${{ secrets.DIGITALOCEAN_SSH_KEY }}

jobs:
  deploy-log-viewer:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug environment variables
      run: |
        echo "üîç Debugging environment variables..."
        echo "DROPLET_IP length: ${#DROPLET_IP}"
        echo "DROPLET_IP (first 10 chars): ${DROPLET_IP:0:10}..."
        echo "SSH_PRIVATE_KEY length: ${#SSH_PRIVATE_KEY}"
        echo "SSH_PRIVATE_KEY (first 50 chars): ${SSH_PRIVATE_KEY:0:50}..."
        echo "DROPLET_USER: $DROPLET_USER"
        
        if [ -z "$DROPLET_IP" ]; then
          echo "‚ùå DROPLET_IP is empty!"
          exit 1
        fi
        
        if [ -z "$SSH_PRIVATE_KEY" ]; then
          echo "‚ùå SSH_PRIVATE_KEY is empty!"
          exit 1
        fi
        
        echo "‚úÖ Environment variables are set"
    
    - name: Setup SSH
      run: |
        echo "üîß Setting up SSH..."
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "SSH key file created, size: $(wc -c < ~/.ssh/id_rsa) bytes"
        
        # Check if the key starts with the expected format
        if grep -q "BEGIN.*PRIVATE KEY" ~/.ssh/id_rsa; then
          echo "‚úÖ SSH key has correct BEGIN marker"
        else
          echo "‚ùå SSH key missing BEGIN marker"
          echo "First few lines:"
          head -5 ~/.ssh/id_rsa
        fi
        
        if grep -q "END.*PRIVATE KEY" ~/.ssh/id_rsa; then
          echo "‚úÖ SSH key has correct END marker"
        else
          echo "‚ùå SSH key missing END marker"
          echo "Last few lines:"
          tail -5 ~/.ssh/id_rsa
        fi
        
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
        echo "SSH setup complete"
        
        echo "üîç Testing SSH connection..."
        ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP "echo 'SSH test successful'" || echo "SSH test failed"
    
    - name: Copy log viewer files to droplet
      run: |
        echo "üì§ Copying real-time log viewer files to droplet..."
        echo "Using: scp realtime-log-viewer.sh $DROPLET_USER@$DROPLET_IP:~/"
        echo "DROPLET_USER: $DROPLET_USER"
        echo "DROPLET_IP: $DROPLET_IP"
        
        echo "üîç Checking files before copy..."
        ls -la realtime-log-viewer.sh
        
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no realtime-log-viewer.sh $DROPLET_USER@$DROPLET_IP:~/
        echo "‚úÖ Log viewer script copied successfully"
        
        echo "üîç Verifying file on droplet..."
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP "ls -la realtime-log-viewer.sh"
    
    - name: Deploy real-time log viewer
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP << 'EOF'
          set -e
          
          echo "üöÄ Deploying Real-Time Log Viewer..."
          
          # Make script executable
          chmod +x realtime-log-viewer.sh
          
          # Stop existing service if running
          echo "üõë Stopping existing log viewer service..."
          systemctl stop realtime-log-viewer || true
          
          # Run deployment script
          echo "üì¶ Running deployment script..."
          ./realtime-log-viewer.sh
          
          # Check if service is running
          echo "üîç Checking service status..."
          if systemctl is-active --quiet realtime-log-viewer; then
            echo "‚úÖ Real-Time Log Viewer is running"
          else
            echo "‚ùå Real-Time Log Viewer failed to start"
            systemctl status realtime-log-viewer
            exit 1
          fi
          
          # Test web interface
          echo "üåê Testing web interface..."
          sleep 10  # Wait for service to fully start
          
          if curl -f http://localhost:8080 > /dev/null 2>&1; then
            echo "‚úÖ Web interface is accessible"
          else
            echo "‚ùå Web interface is not accessible"
            echo "Checking service logs..."
            journalctl -u realtime-log-viewer --no-pager -n 20
            exit 1
          fi
          
          echo ""
          echo "üéâ Real-Time Log Viewer deployment completed!"
          echo ""
          echo "üìä Access your logs at:"
          echo "   - Web Interface: http://$DROPLET_IP:8080"
          echo ""
          echo "üî¥ Features:"
          echo "   - REAL-TIME streaming (logs appear as they happen)"
          echo "   - Live statistics (total logs, errors, warnings)"
          echo "   - Color-coded log levels"
          echo "   - All Docker containers"
          echo "   - Auto-scroll to bottom"
          echo ""
          echo "üìù Management:"
          echo "   - Start: systemctl start realtime-log-viewer"
          echo "   - Stop: systemctl stop realtime-log-viewer"
          echo "   - Status: systemctl status realtime-log-viewer"
          echo "   - Logs: journalctl -u realtime-log-viewer -f"
        EOF
    
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Test SSH connection and service status
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DROPLET_USER@$DROPLET_IP << 'EOF'
          echo "üìä Service Status:"
          systemctl status realtime-log-viewer --no-pager
          
          echo ""
          echo "üìä Container Status:"
          docker ps | grep realtime-log-viewer || echo "No realtime-log-viewer container found"
          
          echo ""
          echo "üìä Port Status:"
          netstat -tlnp | grep :8080 || echo "Port 8080 not listening"
          
          echo ""
          echo "üìä Recent Logs:"
          journalctl -u realtime-log-viewer --no-pager -n 10
        EOF
        
        echo "‚úÖ Deployment verification completed"
    
    - name: Deployment Summary
      run: |
        echo "üéâ Real-Time Log Viewer Deployment Summary"
        echo "=========================================="
        echo ""
        echo "‚úÖ Files deployed:"
        echo "   - realtime-log-viewer.sh"
        echo "   - REALTIME_LOG_VIEWER.md"
        echo ""
        echo "üåê Access URL:"
        echo "   http://$DROPLET_IP:8080"
        echo ""
        echo "üîß Service: realtime-log-viewer"
        echo ""
        echo "üìù Next steps:"
        echo "   1. Open http://$DROPLET_IP:8080 in your browser"
        echo "   2. Click 'Start Streaming' to begin"
        echo "   3. Watch logs appear in real-time!"
        echo ""
        echo "üõ†Ô∏è Management commands:"
        echo "   - systemctl status realtime-log-viewer"
        echo "   - systemctl restart realtime-log-viewer"
        echo "   - journalctl -u realtime-log-viewer -f" 